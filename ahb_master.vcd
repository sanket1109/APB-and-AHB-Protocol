$date
	Thu Dec 30 01:16:30 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module ahb_master_tb $end
$var wire 2 ! sel [1:0] $end
$var wire 1 " hwrite $end
$var wire 32 # hwdata [31:0] $end
$var wire 2 $ htrans [1:0] $end
$var wire 3 % hsize [2:0] $end
$var wire 1 & hready $end
$var wire 4 ' hprot [3:0] $end
$var wire 1 ( hmastlock $end
$var wire 3 ) hburst [2:0] $end
$var wire 32 * haddr [31:0] $end
$var wire 32 + dout [31:0] $end
$var reg 32 , addr [31:0] $end
$var reg 32 - dina [31:0] $end
$var reg 32 . dinb [31:0] $end
$var reg 1 / enable $end
$var reg 1 0 hclk $end
$var reg 32 1 hrdata [31:0] $end
$var reg 1 2 hreadyout $end
$var reg 1 3 hresetn $end
$var reg 1 4 hresp $end
$var reg 2 5 slave_sel [1:0] $end
$var reg 1 6 wr $end
$scope module dut $end
$var wire 32 7 addr [31:0] $end
$var wire 32 8 dina [31:0] $end
$var wire 32 9 dinb [31:0] $end
$var wire 1 / enable $end
$var wire 1 0 hclk $end
$var wire 32 : hrdata [31:0] $end
$var wire 1 2 hreadyout $end
$var wire 1 3 hresetn $end
$var wire 1 4 hresp $end
$var wire 2 ; slave_sel [1:0] $end
$var wire 1 6 wr $end
$var reg 32 < dout [31:0] $end
$var reg 32 = haddr [31:0] $end
$var reg 3 > hburst [2:0] $end
$var reg 1 ( hmastlock $end
$var reg 4 ? hprot [3:0] $end
$var reg 1 & hready $end
$var reg 3 @ hsize [2:0] $end
$var reg 2 A htrans [1:0] $end
$var reg 32 B hwdata [31:0] $end
$var reg 1 " hwrite $end
$var reg 2 C next_state [1:0] $end
$var reg 2 D sel [1:0] $end
$var reg 2 E state [1:0] $end
$upscope $end
$scope task read $end
$var reg 32 F address [31:0] $end
$var reg 2 G sel [1:0] $end
$upscope $end
$scope task write $end
$var reg 32 H a [31:0] $end
$var reg 32 I address [31:0] $end
$var reg 32 J b [31:0] $end
$var reg 2 K sel [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
b0 C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
b0 ;
b0 :
b0 9
b0 8
b0 7
06
b0 5
04
13
02
b0 1
00
0/
b0 .
b0 -
b0 ,
bx +
bx *
bx )
x(
bx '
x&
bx %
bx $
bx #
x"
bx !
$end
#2
b0 E
0&
b0 *
b0 =
b0 !
b0 D
10
#4
00
#6
10
#8
00
#10
b0 +
b0 <
b0 #
b0 B
0(
b0 $
b0 A
b0 '
b0 ?
b0 )
b0 >
b0 %
b0 @
0"
10
03
#12
00
#14
10
#16
00
#18
10
#20
00
b10 J
b1 H
b1001 I
b1 K
13
#22
b1 !
b1 D
b1 C
1/
b1 5
b1 ;
10
#24
00
#26
b10 C
b11 #
b11 B
1&
1"
b1001 *
b1001 =
b1 E
16
b1001 ,
b1001 7
b10 .
b10 9
b1 -
b1 8
10
#28
00
#30
b0 C
b10 E
b101 F
b10 G
0/
10
#32
00
#34
0&
b10 !
b10 D
b0 E
b1 C
1/
b10 5
b10 ;
10
#36
00
#38
b11 C
b1 E
1&
0"
b101 *
b101 =
b101 ,
b101 7
06
10
#40
00
#42
b0 C
b11 E
0/
10
#44
00
#46
b0 E
0&
10
#48
00
#50
10
#52
00
#54
10
#56
00
#58
10
#60
00
#62
10
#64
00
#66
10
#68
00
#70
10
#72
00
#74
10
#76
00
#78
10
#80
00
#82
10
#84
00
#86
10
#88
00
#90
10
#92
00
